/**
 * Project to take positive odd integer and place into table for which
 * all row, column, and diagonal sums are equal.
 *
 * CSC 1350 Programming project No 6
 * Section 7
 *
 * @author amesta2
 * @since 11/7/2018
 *
 */

import java.util.Scanner;

public class Prog06_MakeMagic {

	public static void main(String[] args) {
	int n = 0;
//main method____________________________________________________________________________________________________________________________________________________________________	
	n = numberIsValid();
	System.out.println(n);
	System.out.println("");
	int[][] magicArray = squareCreator(n);

	 if (validMagicSquare(magicArray, n)) {
		 System.out.println("");
         System.out.println("It is confirmed: This is a magic square."); 
	 }
     else {
    	 System.out.println("");
         System.out.println("This is not a magic square."); 
     }
 } 
	
//number validator method_______________________________________________________________________________________________________________________________________________________
	public static int numberIsValid () {
		Scanner valid = new Scanner (System.in);
		boolean isValid = false;
		int validValue = 0;
		
		System.out.println("Letâ€™s make some magic! ");
		System.out.println("Enter an odd number greater than 0:");
		do {
				if (valid.hasNextInt()) { validValue = valid.nextInt();
				}
				else {
					valid.next();
				}
				
				if (validValue <= 0 || validValue % 2 != 1) { System.out.println("Please enter a valid value:"); }
				
				if (validValue % 2 != 0 && validValue > 0)  { System.out.println(""); isValid = true; }
		}
		  while (isValid == false);
		
		  valid.close();
		
		  return validValue;
		}	
//magic square creator method_______________________________________________________________________________________________________________________________________________	
	public static int[][] squareCreator (int n) {
		int[][] magicArray = new int[n][n];

	        int row = n-1;
	        int col = n/2;
	        int a;
	        int b;
	        
	        for (int k = 1; k <= n*n; k++) {
	           
	        	a = row;
	        	b = col;
	        	
	        	magicArray[row][col] = k;
	        	
	        	row++;
	        	col++;

	        	  if (row == n) {
	        		  row = 0;
	        	  }
	        	  if (col == n) {
	        		  col = 0;
	        	  }
	        
	        	  if (magicArray[row][col] != 0) {
	        		 if (row == 0 && col != 0) {
	        			 row = n - 1;
	        			 col--;
	        		 }
	        		 else if (col == 0 && row != 0) {
	        			 col = n - 1;
	        			 row--;
	        		 }
	        		 else if (row == 0 && col == 0) {
	        			 row = n - 1;
	        			 col = n - 1;
	        		 }
	        		 else {
	        			 row--;
	        			 col--;
	        		 }
	        		 row--;
	        	  }
	        }
	        // print results
	        for (int k = 0; k < n; k++) {
	            for (int j = 0; j < n; j++) {
	                System.out.printf("%5d", magicArray[k][j]);
	            }
	            System.out.println();
	        }
			return magicArray;
	    }
//magic square validator method________________________________________________________________________________________________________________________________________________
	public static boolean validMagicSquare(int magicArray[][], int n) {
//calculate diagonal values
        int diagonalSum = 0; 
        for (int i = 0; i < n; i++) 
            diagonalSum += magicArray[i][i]; 
  
//calculate row values
        for (int i = 0; i < n; i++) { 
  
            int rowSum = 0; 
            for (int j = 0; j < n; j++) 
                rowSum += magicArray[i][j]; 
  
//calculate if rowSum is equal to diagonalSum
            if (rowSum != diagonalSum) 
                return false; 
        } 
  
//calculate column values      
        for (int i = 0; i < n; i++) { 
  
            int colSum = 0; 
            for (int j = 0; j < n; j++) 
                colSum += magicArray[j][i]; 
  
//calculate if column diagonalSum is equal to diagonal diagonalSum
            if (diagonalSum != colSum) 
                return false; 
        } 
  
        return true; 
    } 
}
